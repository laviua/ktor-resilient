buildscript {
    ext.java_version = 17
    ext.kotlin_version = '1.8.22'
    ext.kotlinx_coroutines = '1.7.1'
    ext.ktor_version = '2.3.1'
    ext.resilience4j_version = '2.0.2'
    ext.jackson_version = '2.14.2'
    ext.slf4j_version = '1.7.25'
    // test
    ext.junit_version = '5.9.3'
    ext.wiremock_version = '2.35.0'
    ext.kotest_version = '5.4.2'
    ext.mockk_version = '1.12.4'
    ext.logback_version = '1.2.9'

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}


plugins {
    id('io.github.gradle-nexus.publish-plugin') version '1.1.0'
}
nexusPublishing {
    repositories {
        sonatype {
            def sonatypeUsername = System.getenv("SONATYPE_USERNAME") ?: project.findProperty("sonatypeUsername")
            def sonatypePassword = System.getenv("SONATYPE_PASSWORD") ?: project.findProperty("sonatypePassword")
            if (sonatypeUsername == null || sonatypePassword == null) {
                throw new GradleException("Sonatype credentials not found in environment variables or Gradle properties.")
            }
            username = sonatypeUsername
            password = sonatypePassword
        }
    }
}

configure(subprojects) {
    apply plugin: 'idea'
    apply plugin: 'kotlin'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.jetbrains.kotlin.jvm'

    version = project.version

    idea {
        module {
            outputDir file('build/classes/main')
            testOutputDir file('build/classes/test')
        }
    }

    test {
        useJUnitPlatform()
        reports {
            junitXml.required = true
            html.required = true
        }

        // Always run tests, even when nothing changed.
        dependsOn 'cleanTest'

        // Show test results.
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    sourceCompatibility = "$java_version"

    repositories {
        mavenLocal()
        mavenCentral()
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "$java_version"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "$java_version"
    }

}

task incrementVersion {
    doLast {
        def propsFile = file('gradle.properties')
        def props = new Properties()
        propsFile.withInputStream { inputStream ->
            props.load(inputStream)
        }

        def versionString = props.getProperty('version')
        def (major, minor, patch) = versionString.tokenize('.').collect { it.toInteger() }

        patch++
        def newVersion = "${major}.${minor}.${patch}"

        props.setProperty('version', newVersion)
        propsFile.withOutputStream { outputStream ->
            props.store(outputStream, null)
        }

        println "Version updated to: $newVersion"
    }
}